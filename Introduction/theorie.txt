Lesson 01 - 23/08/2023 - архитектура консольного приложения
01. Введение
На сервере (выделенном удаленном компьютере с публичным IP и доменом) размещается Backend и Frontend + база данных
Браузер отправляет GET-запрос на Frontend-сервер (после того, как получить IP по домену из DNS) на получение страницы
В вашем случае React отдает соответствующий код HTML + JS + CSS
Страница отображается в браузере
В соответствии с логикой работы Frontend страница отправляет запрос на Backend, например, на получение списка пользователей
Backend запрашивает данные в базе, получает список пользователей, преобразует его в JSON и отдает браузеру
Браузер в нужном виде отображает этот список
image

Задача Backend-разработчика написать Endpoints - то есть методы, которые может вызывать Frontend у Backend.
Каждый такой метод - принимает или получает JSON (как правило).
Какие еще задачи у Backend-разработчика?
Реализация аутентификации/авторизации
Написание документации
Валидация входящих данных (поле не может быть пустым, пароль слишком легкий и т.д.)
Обработка ошибок (попытка получить пользователя с ID, которого нет на сервере)
Написание модульных/интеграционных тестов
Отправка запросов в базу данных
Разработка архитектуры приложения
и т.д.
02. Разработка архитектуры приложения
Мы будем использовать монолитную трехслойную архитектуру
Состоит из следующих слоев:
Слой "контроллеров" - отвечают за конечное взаимодействие с клиентом (в нашем случае - Обработка HTTP-запросов)
Слой "сервисов" - отвечает за бизнес-логику приложения
Слой "репозиториев"/DAO - отвечает за взаимодействие с хранилищем данных
Дополнительно создаем слой моделей (модели предметной области, сущности, которые будем сохранять в хранилище)
image

Реализация консольного приложения согласно этой архитектуре
image

UsersController - класс, отвечающий за взаимодействие с консолью и сервисом
UsersService - интерфейс, который содержит описание методов регистрации
UsersSerivceImpl - класс, который содержит реализацию метода регистрации с проверкой email и password и последующим сохранением этих данных в репозиторий
CrudRepository - интерфейс, который описывает базовые методы любого хранилища
UsersRepository - интерфейс, который описывает методы хранилища пользователей
UsersRepositoryListImpl - класс, который содержит реализацию хранения пользователей в списке
UsersRepositoryFileImpl - класс, который содержит реализацию хранения пользователей в файле
Main - точка входа в приложение, создает и связывает (собирает) все компоненты приложения
Замечания
Для обеспечения гибкости приложений следует применять подход, при котором один класс не зависит от другого напрямую.
Вместо этого мы создаем интерфейсы и прописываем зависимости через них.
Тогда вы всегда можете подменить реализацию класса, от которого вы зависите, не изменя код основного класса.